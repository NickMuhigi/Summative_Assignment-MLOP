#!/usr/bin/env python3
"""
Cloud deployment helper script
Supports deployment to Heroku, Railway, or Render
"""

import os
import subprocess
import json
import sys

def create_procfile():
    """Create Procfile for Heroku deployment"""
    procfile_content = """web: uvicorn api:app --host=0.0.0.0 --port=$PORT
streamlit: streamlit run app.py --server.port=$PORT --server.address=0.0.0.0"""
    
    with open('Procfile', 'w') as f:
        f.write(procfile_content)
    print("✅ Created Procfile")

def create_runtime_txt():
    """Create runtime.txt for Python version"""
    with open('runtime.txt', 'w') as f:
        f.write('python-3.9.18')
    print("✅ Created runtime.txt")

def update_requirements():
    """Update requirements.txt for cloud deployment"""
    additional_deps = [
        "gunicorn==21.2.0",
        "psutil==5.9.0"
    ]
    
    with open('requirements.txt', 'a') as f:
        for dep in additional_deps:
            f.write(f"\n{dep}")
    print("✅ Updated requirements.txt")

def create_app_yaml():
    """Create app.yaml for Google Cloud App Engine"""
    app_yaml_content = """runtime: python39

env_variables:
  PORT: 8080

automatic_scaling:
  min_instances: 1
  max_instances: 10

handlers:
- url: /.*
  script: auto
"""
    
    with open('app.yaml', 'w') as f:
        f.write(app_yaml_content)
    print("✅ Created app.yaml for Google Cloud")

def create_railway_config():
    """Create railway.json for Railway deployment"""
    railway_config = {
        "build": {
            "builder": "NIXPACKS"
        },
        "deploy": {
            "startCommand": "uvicorn api:app --host 0.0.0.0 --port $PORT",
            "healthcheckPath": "/health"
        }
    }
    
    with open('railway.json', 'w') as f:
        json.dump(railway_config, f, indent=2)
    print("✅ Created railway.json")

def create_render_yaml():
    """Create render.yaml for Render deployment"""
    render_config = """services:
  - type: web
    name: fruit-classifier-api
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: uvicorn api:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.18
      - key: PORT
        value: 10000
"""
    
    with open('render.yaml', 'w') as f:
        f.write(render_config)
    print("✅ Created render.yaml")

def setup_git():
    """Initialize git repository if not exists"""
    if not os.path.exists('.git'):
        try:
            subprocess.run(['git', 'init'], check=True)
            subprocess.run(['git', 'add', '.'], check=True)
            subprocess.run(['git', 'commit', '-m', 'Initial commit'], check=True)
            print("✅ Git repository initialized")
        except subprocess.CalledProcessError:
            print("⚠️ Git setup failed - make sure git is installed")

def deploy_to_heroku():
    """Deploy to Heroku"""
    print("🚀 Deploying to Heroku...")
    
    app_name = input("Enter Heroku app name (or press Enter for auto-generated): ").strip()
    
    try:
        # Create Heroku app
        if app_name:
            subprocess.run(['heroku', 'create', app_name], check=True)
        else:
            subprocess.run(['heroku', 'create'], check=True)
        
        # Deploy
        subprocess.run(['git', 'push', 'heroku', 'main'], check=True)
        
        print("✅ Deployed to Heroku successfully!")
        
        # Get app URL
        result = subprocess.run(['heroku', 'info', '--json'], capture_output=True, text=True)
        if result.returncode == 0:
            app_info = json.loads(result.stdout)
            print(f"🌐 App URL: {app_info['app']['web_url']}")
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Heroku deployment failed: {e}")
        print("Make sure you have Heroku CLI installed and are logged in")

def deploy_to_railway():
    """Deploy to Railway"""
    print("🚀 Deploying to Railway...")
    
    try:
        # Initialize Railway project
        subprocess.run(['railway', 'login'], check=True)
        subprocess.run(['railway', 'init'], check=True)
        subprocess.run(['railway', 'up'], check=True)
        
        print("✅ Deployed to Railway successfully!")
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Railway deployment failed: {e}")
        print("Make sure you have Railway CLI installed")

def show_deployment_instructions():
    """Show manual deployment instructions"""
    print("\n📋 Manual Deployment Instructions:")
    print("="*50)
    
    print("\n🔵 Heroku:")
    print("1. Install Heroku CLI: https://devcenter.heroku.com/articles/heroku-cli")
    print("2. heroku login")
    print("3. heroku create your-app-name")
    print("4. git push heroku main")
    
    print("\n🟢 Railway:")
    print("1. Install Railway CLI: npm install -g @railway/cli")
    print("2. railway login")
    print("3. railway init")
    print("4. railway up")
    
    print("\n🟣 Render:")
    print("1. Push code to GitHub")
    print("2. Connect GitHub repo to Render")
    print("3. Use render.yaml for configuration")
    
    print("\n🟡 Google Cloud:")
    print("1. Install gcloud CLI")
    print("2. gcloud app deploy")

def main():
    """Main deployment function"""
    print("🍎 Fruit Classifier - Cloud Deployment Helper")
    print("="*50)
    
    # Create deployment files
    create_procfile()
    create_runtime_txt()
    update_requirements()
    create_app_yaml()
    create_railway_config()
    create_render_yaml()
    
    print("\n📦 Deployment files created!")
    
    # Setup git
    setup_git()
    
    # Choose deployment method
    print("\n🚀 Choose deployment method:")
    print("1. Heroku (automated)")
    print("2. Railway (automated)")
    print("3. Show manual instructions")
    print("4. Exit")
    
    choice = input("\nEnter choice (1-4): ").strip()
    
    if choice == '1':
        deploy_to_heroku()
    elif choice == '2':
        deploy_to_railway()
    elif choice == '3':
        show_deployment_instructions()
    elif choice == '4':
        print("👋 Goodbye!")
    else:
        print("❌ Invalid choice")
    
    print("\n✅ Deployment setup complete!")
    print("📝 Next steps:")
    print("1. Test your deployed API endpoints")
    print("2. Run load tests against the deployed URL")
    print("3. Monitor performance and scaling")

if __name__ == "__main__":
    main()